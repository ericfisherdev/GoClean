name: Create Release Tag

on:
  pull_request:
    types: [closed]
    branches:
      - release

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from VERSION file
      id: get_version
      run: |
        # Use the get-version.sh script for consistent version extraction
        VERSION=$(.github/scripts/get-version.sh)
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "📦 Detected version: ${VERSION}"

    - name: Validate version format
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        echo "🔍 Validating version format: ${VERSION}"
        
        # Additional validation beyond the script
        if [[ "${VERSION}" =~ ^0\.0\.0$ ]]; then
          echo "❌ ERROR: Version cannot be 0.0.0" >&2
          exit 1
        fi
        
        echo "✅ Version format is valid"

    - name: Check if tag already exists
      id: check_tag
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        TAG_NAME="v${VERSION}"
        
        if git rev-parse "${TAG_NAME}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️  Tag ${TAG_NAME} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✅ Tag ${TAG_NAME} does not exist - ready to create"
        fi
        
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

    - name: Get last tag for comparison
      id: last_tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "last_tag=${LAST_TAG}" >> $GITHUB_OUTPUT
        echo "📋 Last tag was: ${LAST_TAG}"

    - name: Create annotated tag
      if: steps.check_tag.outputs.exists == 'false'
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        TAG_NAME="${{ steps.check_tag.outputs.tag_name }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        LAST_TAG="${{ steps.last_tag.outputs.last_tag }}"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Create detailed tag message with printf for proper newlines
        TAG_MESSAGE=$(printf "Release %s\n\nCreated from PR #%s: %s\n\nPrevious version: %s\nRelease branch: %s\nCommit: %s\nTriggered by: @%s\n\nThis tag will trigger the automated release workflow." \
                     "${VERSION}" "${PR_NUMBER}" "${PR_TITLE}" "${LAST_TAG}" "${GITHUB_REF_NAME}" "${GITHUB_SHA:0:7}" "${GITHUB_ACTOR}")
        
        # Create the annotated tag
        git tag -a "${TAG_NAME}" -m "${TAG_MESSAGE}"
        
        echo "🏷️  Created annotated tag: ${TAG_NAME}"

    - name: Push tag to trigger release
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        TAG_NAME="${{ steps.check_tag.outputs.tag_name }}"
        
        # Push the tag (this will trigger the release.yml workflow)
        git push origin "${TAG_NAME}"
        
        echo "🚀 Pushed tag ${TAG_NAME} - release workflow will begin shortly"

    - name: Create draft release
      if: steps.check_tag.outputs.exists == 'false'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_TITLE: ${{ github.event.pull_request.title }}
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        TAG_NAME="${{ steps.check_tag.outputs.tag_name }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        LAST_TAG="${{ steps.last_tag.outputs.last_tag }}"
        
        # Create temporary file for release notes with proper formatting
        RELEASE_NOTES_FILE=$(mktemp)
        trap "rm -f ${RELEASE_NOTES_FILE}" EXIT
        
        # Write release notes to temporary file with proper newlines
        printf "## GoClean %s\n\n### Changes\nThis release was created from PR #%s: %s\n\n### Previous Version\n%s → %s\n\n### Installation\nDownload the appropriate binary for your platform from the assets below.\n\n### What's Changed\n- See [CHANGELOG.md](https://github.com/%s/blob/%s/CHANGELOG.md) for detailed changes\n- Compare changes: [\`%s...%s\`](https://github.com/%s/compare/%s...%s)\n\n---\n*This is a draft release. The release workflow is building binaries and will publish automatically once complete.*" \
               "${VERSION}" "${PR_NUMBER}" "${PR_TITLE}" "${LAST_TAG}" "${TAG_NAME}" "${GITHUB_REPOSITORY}" "${TAG_NAME}" "${LAST_TAG}" "${TAG_NAME}" "${GITHUB_REPOSITORY}" "${LAST_TAG}" "${TAG_NAME}" > "${RELEASE_NOTES_FILE}"

        # Create draft release using notes file
        gh release create "${TAG_NAME}" \
          --draft \
          --title "GoClean ${VERSION}" \
          --notes-file "${RELEASE_NOTES_FILE}" \
          --latest
        
        echo "📝 Created draft release: ${TAG_NAME}"
        echo "🔗 Release URL: https://github.com/${GITHUB_REPOSITORY}/releases/tag/${TAG_NAME}"

    - name: Comment on PR with success
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.get_version.outputs.VERSION }}';
          const tagName = '${{ steps.check_tag.outputs.tag_name }}';
          const lastTag = '${{ steps.last_tag.outputs.last_tag }}';
          
          const body = "🎉 **Release " + tagName + " has been triggered!**\n\n" +
                       "### What happens next:\n" +
                       "1. ✅ Tag `" + tagName + "` has been created and pushed\n" +
                       "2. ✅ Draft release has been created\n" +
                       "3. 🔄 Release workflow is building binaries for all platforms\n" +
                       "4. 📦 Release will be published automatically when build completes\n\n" +
                       "### Links:\n" +
                       "- 🏷️ [View Tag](https://github.com/" + context.repo.owner + "/" + context.repo.repo + "/releases/tag/" + tagName + ")\n" +
                       "- 🔍 [Compare Changes](https://github.com/" + context.repo.owner + "/" + context.repo.repo + "/compare/" + lastTag + "..." + tagName + ")\n" +
                       "- ⚡ [Monitor Build Progress](https://github.com/" + context.repo.owner + "/" + context.repo.repo + "/actions)\n\n" +
                       "### Version Info:\n" +
                       "- **Previous:** " + lastTag + "\n" +
                       "- **Current:** " + tagName + "\n" +
                       "- **Source:** VERSION file\n\n" +
                       "*The release will be available shortly with downloadable binaries for all supported platforms.*";

          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Handle existing tag
      if: steps.check_tag.outputs.exists == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.get_version.outputs.VERSION }}';
          const tagName = '${{ steps.check_tag.outputs.tag_name }}';
          
          const body = "⚠️ **Tag " + tagName + " already exists**\n\n" +
                       "The version `" + version + "` in the VERSION file corresponds to an existing release.\n\n" +
                       "### To create a new release:\n" +
                       "1. Update the `VERSION` file with a new version number\n" +
                       "2. Commit the change to this PR\n" +
                       "3. Merge the PR again\n\n" +
                       "### Existing Release:\n" +
                       "- 🏷️ [View Existing Release](https://github.com/" + context.repo.owner + "/" + context.repo.repo + "/releases/tag/" + tagName + ")\n\n" +
                       "*No new release was created.*";

          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Summary
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        TAG_NAME="${{ steps.check_tag.outputs.tag_name }}"
        TAG_EXISTS="${{ steps.check_tag.outputs.exists }}"
        
        echo "🏁 Workflow Summary:"
        echo "   📦 Version: ${VERSION}"
        echo "   🏷️  Tag: ${TAG_NAME}"
        
        if [[ "${TAG_EXISTS}" == "false" ]]; then
          echo "   ✅ Status: Release triggered successfully"
          echo "   🔗 Monitor: https://github.com/${GITHUB_REPOSITORY}/actions"
        else
          echo "   ⚠️  Status: Tag already exists - no action taken"
        fi