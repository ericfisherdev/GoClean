name: Auto Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - release

permissions:
  contents: write
  pull-requests: read

jobs:
  auto-tag-and-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Extract version from code
      id: extract_version
      run: |
        # Try to extract version from multiple possible locations
        VERSION=""
        
        # Check version.go or similar files
        if [ -f "internal/version/version.go" ]; then
          VERSION=$(grep -oP 'Version\s*=\s*"\K[^"]+' internal/version/version.go || true)
        fi
        
        # Check main.go for version constant
        if [ -z "$VERSION" ] && [ -f "cmd/goclean/main.go" ]; then
          VERSION=$(grep -oP 'version\s*=\s*"\K[^"]+' cmd/goclean/main.go || true)
        fi
        
        # Check Makefile for VERSION variable
        if [ -z "$VERSION" ] && [ -f "Makefile" ]; then
          VERSION=$(grep -oP '^VERSION\s*[:?]?=\s*\K[^\s]+' Makefile || true)
        fi
        
        # If no version found, try to determine from PR title or last tag
        if [ -z "$VERSION" ]; then
          # Check if PR title contains version
          PR_TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$PR_TITLE" | grep -oP 'v?\K\d+\.\d+\.\d+' || true)
        fi
        
        # If still no version, increment from last tag
        if [ -z "$VERSION" ]; then
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LAST_VERSION=${LAST_TAG#v}
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
          
          # Determine increment type from PR labels or title
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          
          if [[ "$PR_TITLE" =~ (major|breaking) ]] || [[ "$PR_BODY" =~ (BREAKING CHANGE) ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$PR_TITLE" =~ (feature|feat) ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          VERSION="$MAJOR.$MINOR.$PATCH"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "v${{ steps.extract_version.outputs.VERSION }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.extract_version.outputs.VERSION }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.extract_version.outputs.VERSION }} does not exist"
        fi

    - name: Create and push tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Create annotated tag
        git tag -a "v${{ steps.extract_version.outputs.VERSION }}" \
          -m "Release v${{ steps.extract_version.outputs.VERSION }}" \
          -m "PR: #${{ github.event.pull_request.number }}" \
          -m "Title: ${{ github.event.pull_request.title }}"
        
        # Push the tag (this will trigger the release workflow)
        git push origin "v${{ steps.extract_version.outputs.VERSION }}"
        
        echo "Created and pushed tag v${{ steps.extract_version.outputs.VERSION }}"
        echo "This will trigger the release workflow to build and publish the release"

    - name: Comment on PR
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸŽ‰ Release v${{ steps.extract_version.outputs.VERSION }} has been triggered!\n\nThe release workflow is now building the binaries and creating the GitHub release.\n\nYou can monitor the progress [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions).`
          })

    - name: Skip if tag exists
      if: steps.check_tag.outputs.exists == 'true'
      run: |
        echo "Tag v${{ steps.extract_version.outputs.VERSION }} already exists. Skipping tag creation."
        echo "If you need to create a new release, please update the version number in the code."